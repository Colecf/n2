//! Build runner, choosing and executing tasks as determined by out of date inputs.

use crate::db;
use crate::depfile;
use crate::graph::*;
use crate::scanner::Scanner;
use anyhow::{anyhow, bail};
use std::collections::{HashMap, HashSet};
use std::io::Write;

pub struct Work<'a> {
    graph: &'a mut Graph,
    db: &'a mut db::Writer,
    files: HashMap<FileId, bool>,
    want: HashSet<BuildId>,
    ready: HashSet<BuildId>,
}

impl<'a> Work<'a> {
    pub fn new(graph: &'a mut Graph, db: &'a mut db::Writer) -> Self {
        Work {
            graph: graph,
            files: HashMap::new(),
            want: HashSet::new(),
            ready: HashSet::new(),
            db: db,
        }
    }

    /// Visits a BuildId that is an input to the desired output.
    /// Will recursively visit its own inputs.
    /// When it returns, we've stat()ed the outputs of the given build.
    fn want_build(
        &mut self,
        state: &mut FileState,
        last_state: &FileState,
        id: BuildId,
    ) -> anyhow::Result<bool> {
        if self.want.contains(&id) {
            return Ok(true);
        }

        // Visit inputs first, to discover if any are out of date.
        let mut input_dirty = false;
        for id in self.graph.build(id).dirtying_ins().collect::<Vec<_>>() {
            let d = self.want_file(state, last_state, id)?;
            input_dirty = input_dirty || d;
        }
        for id in self.graph.build(id).order_only_ins().to_vec() {
            self.want_file(state, last_state, id)?;
            input_dirty = input_dirty || state.file(id).is_none();
        }

        let mut output_dirty = false;
        if !input_dirty {
            // Ensure outputs are up to date relative to the build.
            state.hash(self.graph, id)?;
            if state.hash_changed(last_state, id) {
                output_dirty = true;
            }
        }

        let dirty = input_dirty || output_dirty;
        if dirty {
            self.want.insert(id);
            if !input_dirty {
                self.ready.insert(id);
            }
        }

        Ok(dirty)
    }

    /// Visits a FileId that is an input to the desired output.
    /// Will recursively visit its own inputs.
    /// When it returns, we've stat()ed the given file.
    pub fn want_file(
        &mut self,
        state: &mut FileState,
        last_state: &FileState,
        id: FileId,
    ) -> anyhow::Result<bool> {
        if let Some(&dirty) = self.files.get(&id) {
            return Ok(dirty);
        }

        let file = self.graph.file(id);
        let dirty = match file.input {
            None => {
                // Input file not generated by a build.  stat here.
                state.restat(id, &file.name)?;
                // Non-generated filse are never dirty.
                false
            }
            Some(bid) => {
                // Input file generated by a build.  want_build will stat it.
                self.want_build(state, last_state, bid)?
            }
        };

        self.files.insert(id, dirty);
        Ok(dirty)
    }

    fn recheck_ready(&mut self, state: &FileState, id: BuildId) -> bool {
        let build = self.graph.build(id);
        println!("  recheck {:?} {}", id, build.location);
        for id in build.depend_ins() {
            let file = self.graph.file(id);
            if state.file(id).is_none() {
                println!("    {:?} {} not ready", id, file.name);
                return false;
            }
        }
        println!("    now ready");
        true
    }

    fn read_depfile(&mut self, id: BuildId, path: &str) -> anyhow::Result<bool> {
        let mut bytes = match std::fs::read(path) {
            Ok(b) => b,
            Err(e) => bail!("read {}: {}", path, e),
        };
        bytes.push(0);

        let mut scanner = Scanner::new(unsafe { std::str::from_utf8_unchecked(&bytes) });
        let parsed_deps = depfile::parse(&mut scanner)
            .map_err(|err| anyhow!("in {}: {}", path, scanner.format_parse_error(err)))?;
        // TODO verify deps refers to correct output
        let deps: Vec<FileId> = parsed_deps
            .deps
            .iter()
            .map(|dep| self.graph.file_id(dep))
            .collect();

        let changed = if self.graph.build_mut(id).update_deps(deps) {
            println!("deps changed {:?}", self.graph.build(id).deps_ins());
            true
        } else {
            false
        };
        Ok(changed)
    }

    fn run_one(&mut self, id: BuildId) -> anyhow::Result<()> {
        let build = self.graph.build(id);
        let cmdline = match &build.cmdline {
            None => return Ok(()),
            Some(c) => c,
        };
        println!("$ {}", cmdline);
        let output = std::process::Command::new("sh")
            .arg("-c")
            .arg(cmdline)
            .output()?;
        if !output.stdout.is_empty() {
            std::io::stdout().write_all(&output.stdout)?;
        }
        if !output.stderr.is_empty() {
            std::io::stdout().write_all(&output.stderr)?;
        }
        if !output.status.success() {
            bail!("subcommand failed");
        }
        if let Some(depfile) = &build.depfile {
            let depfile = &depfile.clone();
            self.read_depfile(id, depfile)?;
        }
        Ok(())
    }

    fn build_finished(&mut self, state: &mut FileState, id: BuildId) -> anyhow::Result<()> {
        let build = self.graph.build(id);
        println!("finished {:?} {}", id, build.location);
        // We may have discovered new deps, so ensure we have mtimes for those.
        for &id in build.deps_ins() {
            if state.file(id).is_some() {
                // Already have state for this file.
                continue;
            }
            let file = self.graph.file(id);
            if file.input.is_some() {
                panic!("discovered new dep on generated file {}", file.name);
            }
            state.restat(id, &file.name)?;
        }

        let hash = state.hash(self.graph, id)?;
        self.db.write_build(self.graph, id, hash)?;

        let mut ready_builds = HashSet::new();
        for &id in build.outs() {
            for &id in &self.graph.file(id).dependents {
                if !self.want.contains(&id) {
                    continue;
                }
                ready_builds.insert(id);
            }
        }
        for id in ready_builds {
            if !self.recheck_ready(state, id) {
                continue;
            }
            self.ready.insert(id);
        }

        Ok(())
    }

    pub fn run(&mut self, state: &mut FileState) -> anyhow::Result<()> {
        while !self.want.is_empty() {
            let id = match self.ready.iter().next() {
                None => {
                    panic!("no ready, but want {:?}", self.want);
                }
                Some(&id) => id,
            };
            self.want.remove(&id);
            self.ready.remove(&id);
            self.run_one(id)?;
            self.build_finished(state, id)?;
        }
        Ok(())
    }
}
